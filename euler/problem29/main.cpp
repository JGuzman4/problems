/*
 *
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 *
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * If they are then placed in numerical order, with any repeats removed, 
 * we get the following sequence of 15 distinct terms:
 *
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 *
 *
 *
 *
*/
#include<fstream>
#include<utility>
#include<string> 
#include<vector> 
#include<set> 
#include<cmath>
#include<boost/multiprecision/gmp.hpp>
#include<iostream>
#include<algorithm>
#include<math.h>
#include<stdlib.h>
using namespace std;
using namespace boost::multiprecision;

void print(vector<mpz_int> s);
mpz_int power(mpz_int a, mpz_int b);


int main(int argc, char* argv[]){

  vector<mpz_int> v;
  for (int a = 2; a <= 100; a++){
    for (int b = 2; b <= 100; b++){
      mpz_int val = power(a, b);
      if (find(v.begin(), v.end(), val) == v.end())
        v.push_back(val);
    }
  }


  cout << v.size() << endl;

  return 0;
} 

void print(vector<mpz_int> s){
  for (unsigned int i = 0; i < s.size(); i++)
    cout << s[i] << endl;
}

mpz_int power(mpz_int a, mpz_int b){
  mpz_int total = 1;
  
  for (int i = 1; i <= b; i++){
    total *= a;
  }
  return total;
}
